<?php

/**
 * @file
 * Optimizely module
 *
 * Originally for Visual Website Optimizer by Awesome Software, http://www.awesome-software.net/
 * and Ted Cooper (ELC) http://drupal.org/user/784944
 *
 * Ported to Optimizely by netstudio.gr and Yannis Karampelas (http://drupal.org/user/1145950).
 *
 * Adds Optimizely javascript (snippet) to the page which loads the A/B test from
 * the optimizely.com website.
 *
 * 7.x-2.x Functionality added to support multiple project entries from an Optimizely account. Each entry
 * specifies target paths to include the Optimizely projects on the specific site paths. Targeting paths
 * eliminates the need to load Optimizely tests on every page of a site.
 *
 * 7.x-2.x by Darren "Dee" Lee (DeeZone: http://drupal.org/user/288060) 
 * and Peter Lehrer (plehrer: http://drupal.org/user/2257350)
 * Sponsored by DoSomething.org (http://www.dosomething.org)
 */

/**
 * Implements hook_help().
 *
 * Help text related to the module's functionality and use.
 */
function optimizely_help($path, $arg) {

  switch ($path) {

    case 'admin/help#optimizely':
      return t('<p><a href="http://optimize.ly/OZRdc0">Optimizely</a> is a third' . 
        ' party service to add A/B testing to a web site. The tests are applied to' . 
        ' the site by loading javascript snippets generated by the Optimizely web' . 
        ' site. The generated javascript files are applied to certain paths on the' . 
        ' site based on Project entries managed by the Optimizely module. To start' . 
        ' to apply the general, sitewide Optimizely javascript file the' . '
         <a href="@settings">Optimizely account ID</a> must be entered in the' . 
         ' module administration page.</p>' .
        '<p>Enable or disable each project entry to apply the project settings' . 
        ' while not needing to remove the actual entry. The default entry can be' . 
        ' disabled when additional project entries are made with more specific' . '
         settings. This can include using the orginal Project Code.</p>',
        array('@settings' => url('admin/config/system/optimizely/settings')));

    case 'admin/config/system/optimizely':
      return t('<p>A listing of the Optimizely projects. Each entry can be' . 
        ' enabled / disabled for specific or wildcard paths. Enabled entries are' . 
        ' highlighted in green while disabled entries are in red. The top,' . 
        ' "Default" entry cannot be deleted but its settings can be adjusted or' . 
        ' completely disabled.</p>' .
        '<p>The goal of having multiple projects is to minimize the size of the' . 
        ' Optimizely hosted javascript file. If all experiments are contained in a' . 
        ' single file and processed on every page load there may be an issue with' . 
        ' increased page load time. Having multiple projects and loading them on' . 
        ' specific paths that apply to the experiments helps to minimize the size' . 
        " of the file and eliminate processing unused javascript on the user's" . 
        ' browser.</p>');

    case 'admin/config/system/optimizely/add_update':
      return t('Add or edit specific project entries. Each entry should have an' . 
        ' Optimizely project / experiment assigned to it, as well as a range of' . 
        ' website paths where the Optimizely javascript hosted file should be' . 
        ' included.');

    case 'admin/config/system/optimizely/settings':
      return t('Add the Optimizely account ID supplied by the Optimizely website.' . 
        ' The account ID is essential to setting up the initial sitewide default' . 
        ' project entry.');
  }
}


/**
 * Implements hook_permission().
 *
 * Limit access to the module settings to accounts that have the "Administer Optimizely module" privilege.
 */
function optimizely_permission() {
  return array(
    'administer optimizely' => array(
      'title' => t('Administer Optimizely module'),
      'description' => 
        t('Administer access to everything in module'),
      'restrict access' => TRUE,
    ),
  );
}


/**
 * Implements hook_theme().
 *
 * All of the template definitions. All related templates can be found
 * /template in the module folder. The template layout can be overridden
 * by the site theme by copying these template files into theme directory.
 *
 * See http://www.jaypan.com/tutorial/themeing-drupal-7-forms-including-css-and-js
 * for details on setting up theme function rather than tpl files.
 */
function optimizely_theme($existing, $type, $theme, $path) {
  return array(
    'optimizely_account_settings_form' => array(
      'render element' => 'form',
      'template' => 'optimizely-account-settings-form',
    ),
    'optimizely_add_update_form' => array(
      'render element' => 'form',
      'template' => 'optimizely-add-update-form',
     ),
  );
}
